Index: OvmfPkg/AcpiPlatformDxe/Xen.c
===================================================================
--- OvmfPkg/AcpiPlatformDxe/Xen.c	(revision 13423)
+++ OvmfPkg/AcpiPlatformDxe/Xen.c	(working copy)
@@ -1,7 +1,9 @@
 /** @file
-  OVMF ACPI QEMU support
+  OVMF ACPI Xen support
 
   Copyright (c) 2008 - 2012, Intel Corporation. All rights reserved.<BR>
+  Copyright (c) 2012, Bei Guan <gbtju85@gmail.com>
+
   This program and the accompanying materials
   are licensed and made available under the terms and conditions of the BSD License
   which accompanies this distribution.  The full text of the license may be found at
@@ -13,10 +15,36 @@
 **/ 
 
 #include "AcpiPlatform.h"
+#include <Library/BaseMemoryLib.h>
+#include <Library/MemoryAllocationLib.h>
 #include <Library/HobLib.h>
 #include <Guid/XenInfo.h>
 
+#define XEN_ACPI_PHYSICAL_ADDRESS         0x000EA020
+#define XEN_BIOS_PHYSICAL_END             0x000FFFFF
 
+EFI_ACPI_2_0_ROOT_SYSTEM_DESCRIPTION_POINTER   *XenAcpiRsdpStructurePtr = NULL;
+UINTN                                          Flag = 0;
+
+//
+// Macro to get the high 32 bits of a 64 bit address
+//
+#define HIGH_PART             0x00000000FFFFFFFFULL
+#define HIGH_32_BITS(a)       ( (a) & HIGH_PART )
+
+//
+// Common structure for Xen ACPI tables
+//
+typedef struct {
+  LIST_ENTRY                                    Link;
+  UINT64                                        Signature;
+} EFI_XEN_ACPI_TABLE_LIST;
+
+
+/**
+  This function detects if OVMF is running on Xen.
+
+**/
 BOOLEAN
 XenDetected (
   VOID
@@ -35,9 +63,305 @@
   return TRUE;
 }
 
+/**
+  This function calculates and updates an UINT8 checksum.
 
+  @param  Buffer          Pointer to buffer to checksum
+  @param  Size            Number of bytes to checksum
+  @param  ChecksumOffset  Offset to place the checksum result in
+
+  @return EFI_SUCCESS             The function completed successfully.
+
+**/
 EFI_STATUS
+AcpiPlatformTableChecksum (
+  IN VOID       *Buffer,
+  IN UINTN      Size,
+  IN UINTN      ChecksumOffset
+  )
+{
+  UINT8 Sum;
+  UINT8 *Ptr;
+
+  Sum = 0;
+  //
+  // Initialize pointer
+  //
+  Ptr = Buffer;
+
+  //
+  // Set checksum to 0 first
+  //
+  Ptr[ChecksumOffset] = 0;
+
+  //
+  // Add all content of buffer
+  //
+  while ((Size--) != 0) {
+    Sum = (UINT8) (Sum + (*Ptr++));
+  }
+  //
+  // Set checksum
+  //
+  Ptr                 = Buffer;
+  Ptr[ChecksumOffset] = (UINT8) (0xff - Sum + 1);
+
+  return EFI_SUCCESS;
+}
+
+/**
+  Get the address of Xen ACPI Root System Description Pointer (RSDP) structure.
+
+  @return  A pointer to Xen RSDP structure.
+
+**/
+EFI_ACPI_2_0_ROOT_SYSTEM_DESCRIPTION_POINTER *
 EFIAPI
+GetXenAcpiRsdp (
+  VOID
+  )
+{
+  UINT8                                          *XenAcpiPtr;
+  EFI_ACPI_2_0_ROOT_SYSTEM_DESCRIPTION_POINTER   *RsdpStructurePtr;
+
+  //
+  // Detect the RSDP structure
+  //
+  for (XenAcpiPtr = (UINT8*)(UINTN) XEN_ACPI_PHYSICAL_ADDRESS;
+       XenAcpiPtr < (UINT8*)(UINTN) XEN_BIOS_PHYSICAL_END;
+       XenAcpiPtr += 0x10) {
+
+    RsdpStructurePtr = (EFI_ACPI_2_0_ROOT_SYSTEM_DESCRIPTION_POINTER *) (UINTN) XenAcpiPtr;
+
+    if (!AsciiStrnCmp ((CHAR8 *) &RsdpStructurePtr->Signature, "RSD PTR ", 8)) {
+      //
+      // RSDP ACPI 1.0 checksum for 1.0/2.0/3.0 table.  This is only the first 20 bytes of the structure
+      //
+      AcpiPlatformTableChecksum (
+        RsdpStructurePtr,
+        sizeof (EFI_ACPI_1_0_ROOT_SYSTEM_DESCRIPTION_POINTER),
+        OFFSET_OF (EFI_ACPI_1_0_ROOT_SYSTEM_DESCRIPTION_POINTER,
+        Checksum)
+        );
+
+      if (RsdpStructurePtr->Revision >= 2) {
+        //
+        // RSDP ACPI 2.0/3.0 checksum, this is the entire table
+        //
+        AcpiPlatformTableChecksum (
+          RsdpStructurePtr,
+          sizeof (EFI_ACPI_2_0_ROOT_SYSTEM_DESCRIPTION_POINTER),
+          OFFSET_OF (EFI_ACPI_2_0_ROOT_SYSTEM_DESCRIPTION_POINTER,
+          ExtendedChecksum)
+          );
+      }
+      return RsdpStructurePtr;
+    }
+  }
+
+  return NULL;
+}
+
+/**
+  Get Xen Acpi tables from the RSDP structure. And installs Xen ACPI tables into the RSDT/XSDT using InstallAcpiTable.
+  Some signature of the installed ACPI tables are: FACP, APIC, HPET, WAET, SSDT, FACS, DSDT.
+
+  @param  This                 Protocol instance pointer.
+  @param  AcpiTableBuffer      A pointer to a buffer containing the ACPI table to be installed.
+  @param  AcpiTableBufferSize  Specifies the size, in bytes, of the AcpiTableBuffer buffer.
+  @param  TableKey             Reurns a key to refer to the ACPI table.
+
+  @return EFI_SUCCESS            The table was successfully inserted.
+  @return EFI_INVALID_PARAMETER  Either AcpiTableBuffer is NULL, TableKey is NULL, or AcpiTableBufferSize 
+                                 and the size field embedded in the ACPI table pointed to by AcpiTableBuffer
+                                 are not in sync.
+  @return EFI_OUT_OF_RESOURCES   Insufficient resources exist to complete the request.
+
+**/
+EFI_STATUS
+EFIAPI
+XenInstallAcpiTableFunc (
+  IN   EFI_ACPI_TABLE_PROTOCOL       *AcpiProtocol,
+  IN   VOID                          *AcpiTableBuffer,
+  IN   UINTN                         AcpiTableBufferSize,
+  OUT  UINTN                         *TableKey
+  )
+{
+  EFI_STATUS                                     Status;
+  EFI_ACPI_DESCRIPTION_HEADER                    *Rsdt = NULL;
+  EFI_ACPI_DESCRIPTION_HEADER                    *Xsdt = NULL;
+  UINT32                                         *CurrentRsdtEntry;
+  VOID                                           *CurrentXsdtEntry;
+  UINTN                                          CurrentTablePointer32;
+  UINT64                                         CurrentTablePointer64;
+  EFI_ACPI_DESCRIPTION_HEADER                    *CurrentTable;
+  UINTN                                          Index;
+  UINTN                                          NumberOfRsdtTableEntries = 0;
+  UINTN                                          NumberOfXsdtTableEntries = 0;
+  LIST_ENTRY                                     InstalledTables;
+  LIST_ENTRY                                     *CurrentList;
+  EFI_XEN_ACPI_TABLE_LIST                        *CurrentTableList;
+  BOOLEAN                                        IsInstalled;
+  EFI_ACPI_2_0_FIXED_ACPI_DESCRIPTION_TABLE      *Fadt2Table = NULL;
+  EFI_ACPI_1_0_FIXED_ACPI_DESCRIPTION_TABLE      *Fadt1Table = NULL;
+  EFI_ACPI_2_0_FIRMWARE_ACPI_CONTROL_STRUCTURE   *Facs2Table = NULL;
+  EFI_ACPI_1_0_FIRMWARE_ACPI_CONTROL_STRUCTURE   *Facs1Table = NULL;
+  EFI_ACPI_DESCRIPTION_HEADER                    *DsdtTable = NULL;
+
+  Flag++;
+  if (Flag > 1) {
+    return EFI_SUCCESS;
+  }
+
+  //
+  // Get the addresses of RSDT and XSDT. Calculate the number of the table entries in RSDT and XSDT.
+  //
+  if (XenAcpiRsdpStructurePtr->RsdtAddress) {
+    Rsdt = (EFI_ACPI_DESCRIPTION_HEADER *) (UINTN) XenAcpiRsdpStructurePtr->RsdtAddress;
+    NumberOfRsdtTableEntries = (Rsdt->Length - sizeof (EFI_ACPI_DESCRIPTION_HEADER)) / sizeof (UINT32);
+  }
+  if (XenAcpiRsdpStructurePtr->XsdtAddress) {
+    Xsdt = (EFI_ACPI_DESCRIPTION_HEADER *) (UINTN) XenAcpiRsdpStructurePtr->XsdtAddress;  
+    NumberOfXsdtTableEntries = (Xsdt->Length - sizeof (EFI_ACPI_DESCRIPTION_HEADER)) / sizeof (UINT64);
+  }
+
+  //
+  // We first install the XSDT tables. If the tables are not found in XSDT, we install the RSDT tables. 
+  // Find the table entries in the XSDT
+  //
+  InitializeListHead (&InstalledTables);
+  for (Index = 0; Index < NumberOfXsdtTableEntries; Index++) {
+    //
+    // Get the table entry from XSDT
+    //
+    CurrentXsdtEntry = (VOID *) ((UINT8 *) Xsdt + sizeof (EFI_ACPI_DESCRIPTION_HEADER) + Index * sizeof (UINT64));
+    CopyMem (&CurrentTablePointer64, CurrentXsdtEntry, sizeof (UINT64));
+
+    CurrentTable = (EFI_ACPI_DESCRIPTION_HEADER *) CurrentTablePointer64;
+
+    //
+    // Install the XSDT tables
+    //
+    Status = InstallAcpiTable (AcpiProtocol, CurrentTable, CurrentTable->Length, TableKey);
+
+    if (EFI_ERROR(Status)) {
+      DEBUG ((EFI_D_INFO, "[XSDT]InstallAcpiTable->%r\n",Status));
+      return Status;
+    }
+
+    //
+    // Create a new list entry to record the installed tables
+    //
+    CurrentTableList = AllocatePool (sizeof (EFI_XEN_ACPI_TABLE_LIST));
+    ASSERT (CurrentTableList);
+
+    CurrentTableList->Signature = CurrentTable->Signature;
+    InsertTailList (&InstalledTables, &CurrentTableList->Link);
+
+    //
+    // Get the FACS and DSDT table address from the table FADT
+    //
+    if (!AsciiStrnCmp ((CHAR8 *) &CurrentTable->Signature, "FACP", 4)) {
+      Fadt2Table = (EFI_ACPI_2_0_FIXED_ACPI_DESCRIPTION_TABLE *) (UINTN) HIGH_32_BITS(CurrentTablePointer64);
+      Facs2Table = (EFI_ACPI_2_0_FIRMWARE_ACPI_CONTROL_STRUCTURE *) (UINTN) Fadt2Table->FirmwareCtrl;
+      DsdtTable  = (EFI_ACPI_DESCRIPTION_HEADER *) (UINTN) Fadt2Table->Dsdt;
+    }
+  }
+
+  //
+  // Find the table entries in the RSDT
+  //
+  for (Index = 0; Index < NumberOfRsdtTableEntries; Index++) {
+    //
+    // Get the table entry from RSDT
+    //
+    CurrentRsdtEntry = (UINT32 *) ((UINT8 *) Rsdt + sizeof (EFI_ACPI_DESCRIPTION_HEADER) + Index * sizeof (UINT32));
+    CopyMem (&CurrentTablePointer32, CurrentRsdtEntry, sizeof (UINT32));
+
+    CurrentTable = (EFI_ACPI_DESCRIPTION_HEADER *) CurrentTablePointer32;
+   
+    //
+    // Check if the table found has been installed before. If yes, we don't need to install it again.
+    //
+    if (!IsListEmpty (&InstalledTables)) {
+      IsInstalled = FALSE;
+      CurrentList = &InstalledTables;
+      do {
+        CurrentList = GetNextNode(&InstalledTables, CurrentList);
+        CurrentTableList = (EFI_XEN_ACPI_TABLE_LIST *) (UINTN) CurrentList;
+
+        if (!AsciiStrnCmp ((CHAR8 *) &CurrentTable->Signature, (CHAR8 *) &CurrentTableList->Signature, 4)) {
+          IsInstalled = TRUE;
+          break;
+        }
+      } while (!IsNodeAtEnd(&InstalledTables, CurrentList));
+
+      //
+      // This table has been installed before, so we don't need to install it any more.
+      //
+      if (IsInstalled) {
+        continue;
+      }
+    }
+
+    //
+    // Install the RSDT tables
+    //
+    Status = InstallAcpiTable (AcpiProtocol, CurrentTable, CurrentTable->Length, TableKey);
+
+    if (EFI_ERROR(Status)) {
+      DEBUG ((EFI_D_INFO, "[RSDT]InstallAcpiTable->%r\n",Status));
+      return Status;
+    }
+
+    //
+    // Get the FACS and DSDT table address from the table FADT
+    //
+    if (!AsciiStrnCmp ((CHAR8 *) &CurrentTable->Signature, "FACP", 4)) {
+      Fadt1Table = (EFI_ACPI_1_0_FIXED_ACPI_DESCRIPTION_TABLE *) (UINTN) CurrentTablePointer32;
+      Facs1Table = (EFI_ACPI_1_0_FIRMWARE_ACPI_CONTROL_STRUCTURE *) (UINTN) Fadt1Table->FirmwareCtrl;
+      DsdtTable  = (EFI_ACPI_DESCRIPTION_HEADER *) (UINTN) Fadt1Table->Dsdt;
+    }
+  }
+
+  //
+  // Install the FACS and DSDT tables
+  //
+  if (Fadt2Table) {
+    //
+    // FACS 2.0
+    //
+    Status = InstallAcpiTable (AcpiProtocol, Facs2Table, Facs2Table->Length, TableKey);
+    if (EFI_ERROR(Status)) {
+      DEBUG ((EFI_D_INFO, "[FACS2]InstallAcpiTable->%r\n",Status));
+      return Status;
+    }
+  }
+  else if (Fadt1Table) {
+    //
+    // FACS 1.0
+    //
+    Status = InstallAcpiTable (AcpiProtocol, Facs1Table, Facs1Table->Length, TableKey);
+    if (EFI_ERROR(Status)) {
+      DEBUG ((EFI_D_INFO, "[FACS1]InstallAcpiTable->%r\n",Status));
+      return Status;
+    }
+  }
+
+  //
+  // DSDT
+  //
+  Status = InstallAcpiTable (AcpiProtocol, DsdtTable, DsdtTable->Length, TableKey);
+  if (EFI_ERROR(Status)) {
+    DEBUG ((EFI_D_INFO, "[DSDT]InstallAcpiTable->%r\n",Status));
+    return Status;
+  }
+
+  return EFI_SUCCESS;
+}
+
+EFI_STATUS
+EFIAPI
 XenInstallAcpiTable (
   IN   EFI_ACPI_TABLE_PROTOCOL       *AcpiProtocol,
   IN   VOID                          *AcpiTableBuffer,
@@ -45,7 +369,21 @@
   OUT  UINTN                         *TableKey
   )
 {
-  return InstallAcpiTable(
+  EFI_ACPI_TABLE_INSTALL_ACPI_TABLE  TableInstallFunction;
+
+  //
+  // If find the Xen ACPI tables
+  //
+  XenAcpiRsdpStructurePtr = GetXenAcpiRsdp ();
+
+  if (XenAcpiRsdpStructurePtr != NULL){
+    TableInstallFunction = XenInstallAcpiTableFunc;
+  }
+  else {
+    TableInstallFunction = InstallAcpiTable;
+  }
+
+  return TableInstallFunction(
            AcpiProtocol,
            AcpiTableBuffer,
            AcpiTableBufferSize,
