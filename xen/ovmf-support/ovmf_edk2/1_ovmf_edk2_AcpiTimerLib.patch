Index: OvmfPkg/Library/AcpiTimerLib/AcpiTimerLib.c
===================================================================
--- OvmfPkg/Library/AcpiTimerLib/AcpiTimerLib.c	(revision 12048)
+++ OvmfPkg/Library/AcpiTimerLib/AcpiTimerLib.c	(working copy)
@@ -1,6 +1,8 @@
 /** @file
   ACPI Timer implements one instance of Timer Library.
 
+  Modified to support Xen HVM - Andrei Warkentin <andreiw@motorola.com>
+
   Copyright (c) 2008, Intel Corporation. All rights reserved.<BR>
   This program and the accompanying materials are
   licensed and made available under the terms and conditions of the BSD License
@@ -17,9 +19,18 @@
 #include <Library/BaseLib.h>
 #include <Library/IoLib.h>
 #include <Library/PciLib.h>
+#include <Library/DebugLib.h>
 
+//
+// PIIX4 usual base BAR.
+//
+
+UINT32 TimerBaseBar = 0x401;
+
+#define PCI_BAR_IO             0x1
 #define ACPI_TIMER_FREQUENCY   3579545
 #define ACPI_TIMER_COUNT_SIZE  0x01000000
+#define ACPI_TIMER_OFFSET      0x8
 
 /**
   The constructor function enables ACPI IO space.
@@ -41,12 +52,21 @@
   Device = 1;
   // Device = 7;
 
+  if (PciRead8 (PCI_LIB_ADDRESS (0,Device,3,0x80)) & 1) {
+    TimerBaseBar = PciRead32 (PCI_LIB_ADDRESS (0,Device,3,0x40));
+    ASSERT(TimerBaseBar & PCI_BAR_IO);
+    TimerBaseBar &= ~PCI_BAR_IO;
+  } else {
+    PciAndThenOr32 (PCI_LIB_ADDRESS (0,Device,3,0x40),
+                    (UINT32) ~0xfc0, TimerBaseBar);
+    PciOr8         (PCI_LIB_ADDRESS (0,Device,3,0x04), 0x01);
+  }
+
   //
   // ACPI Timer enable is in Bus 0, Device ?, Function 3
   //
-  PciOr8         (PCI_LIB_ADDRESS (0,Device,3,0x04), 0x01);
-  PciAndThenOr32 (PCI_LIB_ADDRESS (0,Device,3,0x40), (UINT32) ~0xfc0, 0x400);
-  PciOr8         (PCI_LIB_ADDRESS (0,Device,3,0x80), 0x01);  return RETURN_SUCCESS;
+  PciOr8         (PCI_LIB_ADDRESS (0,Device,3,0x80), 0x01);
+  return RETURN_SUCCESS;
 }
 
 /**
@@ -63,7 +83,7 @@
   VOID
   )
 {
-  return IoRead32 (0x408);
+  return IoRead32 (TimerBaseBar + ACPI_TIMER_OFFSET);
 }
 
 /**
