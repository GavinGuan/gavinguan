Index: OvmfPkg/XenSmbiosDxe/XenSmbiosDxe.inf
===================================================================
--- OvmfPkg/XenSmbiosDxe/XenSmbiosDxe.inf	(revision 0)
+++ OvmfPkg/XenSmbiosDxe/XenSmbiosDxe.inf	(revision 0)
@@ -0,0 +1,64 @@
+## @file
+# Component description file for Xen hvmloader Smbios module.
+#
+# This driver initializes and installs the SMBIOS protocol.
+# Copyright (c) 2009 - 2010, Intel Corporation. All rights reserved.<BR>
+#
+#  This program and the accompanying materials
+#  are licensed and made available under the terms and conditions of the BSD License
+#  which accompanies this distribution. The full text of the license may be found at
+#  http://opensource.org/licenses/bsd-license.php
+#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+#
+#
+##
+
+[Defines]
+  INF_VERSION                    = 0x00010005
+  BASE_NAME                      = XenSmbiosDxe
+  FILE_GUID                      = FBD88642-0737-49bc-81B5-1889CD57D9EA
+  MODULE_TYPE                    = DXE_DRIVER
+  VERSION_STRING                 = 1.0
+
+  ENTRY_POINT                    = XenSmbiosTablePublish
+
+#
+# The following information is for reference only and not required by the build tools.
+#
+#  VALID_ARCHITECTURES           = IA32 X64 IPF EBC
+#
+
+[Sources]
+  XenSmbiosDxe.c
+  XenSmbiosDxe.h
+
+[Packages]
+  MdePkg/MdePkg.dec
+  MdeModulePkg/MdeModulePkg.dec
+  OvmfPkg/OvmfPkg.dec
+
+[LibraryClasses]
+  UefiBootServicesTableLib
+  MemoryAllocationLib
+  BaseMemoryLib
+  BaseLib
+  UefiLib
+#  UefiDriverEntryPoint
+  DebugLib
+#  PcdLib
+  HobLib
+
+[Protocols]
+  gEfiSmbiosProtocolGuid                      # PROTOCOL ALWAYS_PRODUCED
+
+[Guids]
+  gEfiEventReadyToBootGuid                    # PROTOCOL ALWAYS_CONSUMED
+  gEfiSmbiosTableGuid                         # PROTOCOL ALWAYS_CONSUMED
+  gEfiXenInfoGuid
+
+[FixedPcd]
+  gEfiMdeModulePkgTokenSpaceGuid.PcdSmbiosVersion
+
+[Depex]
+  TRUE
Index: OvmfPkg/XenSmbiosDxe/XenSmbiosDxe.c
===================================================================
--- OvmfPkg/XenSmbiosDxe/XenSmbiosDxe.c	(revision 0)
+++ OvmfPkg/XenSmbiosDxe/XenSmbiosDxe.c	(revision 0)
@@ -0,0 +1,180 @@
+/** @file
+  This code passthroughs Xen hvmloader SMBIOS inside OVMF. It also installs the SMBIOS table.
+  
+Copyright (c) 2009 - 2011, Intel Corporation. All rights reserved.<BR>
+This program and the accompanying materials                          
+are licensed and made available under the terms and conditions of the BSD License         
+which accompanies this distribution.  The full text of the license may be found at        
+http://opensource.org/licenses/bsd-license.php                                            
+                                                                                          
+THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,                     
+WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.             
+
+**/
+
+#include "XenSmbiosDxe.h"
+
+//
+// Chassis for SMBIOS entry point structure that is to be installed into EFI system config table.
+//
+SMBIOS_TABLE_ENTRY_POINT *EntryPointStructure    = NULL;
+
+/**
+  Figures out if Xen hvmloader provides SMBIOS for HVM.
+
+  @return UINT32     Address of Xen hvmloader SMBIOS.
+
+**/
+SMBIOS_TABLE_ENTRY_POINT *
+XenSmbiosDetect (
+  VOID
+  )
+{
+
+  UINT32 XenSmbiosPtr;
+  SMBIOS_TABLE_ENTRY_POINT *XenSmbiosEntryPointStructure;
+
+  for (XenSmbiosPtr = XEN_SMBIOS_PHYSICAL_ADDRESS; XenSmbiosPtr < XEN_SMBIOS_PHYSICAL_END; XenSmbiosPtr += 0x10) {
+
+    XenSmbiosEntryPointStructure = (SMBIOS_TABLE_ENTRY_POINT *) (UINTN) XenSmbiosPtr;
+
+    if (!AsciiStrnCmp ((CHAR8 *) XenSmbiosEntryPointStructure->AnchorString, "_SM_", 4) && !AsciiStrnCmp ((CHAR8 *) XenSmbiosEntryPointStructure->IntermediateAnchorString, "_DMI_", 5)) {
+      return XenSmbiosEntryPointStructure;
+    }
+  }
+
+  return NULL;
+}
+
+/**
+  Copy Xen hvmloader SMBIOS contents to OVMF SMBIOS. Produce Table
+  Entry Point and return the pointer to it.
+  
+  @param  TableEntryPointStructure   On exit, points to the SMBIOS entrypoint structure.
+                                
+  @retval EFI_SUCCESS                Structure created sucessfully.
+  @retval EFI_NOT_READY              Some of The SMBIOS records was not available yet.
+  @retval EFI_OUT_OF_RESOURCES       No enough memory.
+  
+**/
+EFI_STATUS
+EFIAPI
+XenSmbiosCreateTable (
+  OUT VOID    **TableEntryPointStructure
+  )
+{
+  EFI_STATUS                      Status;
+  EFI_PHYSICAL_ADDRESS            PhysicalAddress;
+  SMBIOS_TABLE_ENTRY_POINT        *XenSmbiosEntryPointStructure;
+
+  Status                        = EFI_SUCCESS;
+  XenSmbiosEntryPointStructure  = NULL;
+
+  //
+  // Try to find out whether Xen hvmloader provides SMBIOS
+  //
+  XenSmbiosEntryPointStructure = XenSmbiosDetect ();
+
+  if (XenSmbiosEntryPointStructure) {
+    //
+    // Initialize the EntryPointStructure with Xen SMBIOS
+    //
+    if (EntryPointStructure == NULL) {
+      //
+      // Allocate memory to SMBIOS Entry Point Structures (below 4GB)
+
+      //
+      PhysicalAddress = 0xffffffff;
+      Status = gBS->AllocatePages (
+                     AllocateMaxAddress,
+                     EfiReservedMemoryType,
+                     EFI_SIZE_TO_PAGES (sizeof (SMBIOS_TABLE_ENTRY_POINT)),
+                     &PhysicalAddress
+                    );
+      if (EFI_ERROR (Status)) {
+        return EFI_OUT_OF_RESOURCES;
+      }
+
+      EntryPointStructure = (SMBIOS_TABLE_ENTRY_POINT *) (UINTN) PhysicalAddress;
+    
+
+      CopyMem (
+        EntryPointStructure,
+
+        (VOID *) (UINTN) XenSmbiosEntryPointStructure,
+        sizeof (SMBIOS_TABLE_ENTRY_POINT)
+       );
+    }
+
+    //
+    // Allocate memory to Structure Table (below 4GB)
+    //
+    PhysicalAddress = 0xffffffff;
+    Status = gBS->AllocatePages (
+                    AllocateMaxAddress,
+                    EfiReservedMemoryType,
+                    EFI_SIZE_TO_PAGES (EntryPointStructure->TableLength),
+                    &PhysicalAddress
+                    );
+    if (EFI_ERROR (Status)) {
+      FreePages ((VOID*) EntryPointStructure, EFI_SIZE_TO_PAGES (sizeof (SMBIOS_TABLE_ENTRY_POINT)));
+      EntryPointStructure = NULL;
+      return EFI_OUT_OF_RESOURCES;
+    }
+
+    CopyMem (
+      (VOID *) (UINTN) PhysicalAddress,
+      (VOID *) (UINTN) EntryPointStructure->TableAddress,
+      EntryPointStructure->TableLength
+     );
+
+    EntryPointStructure->TableAddress = (UINT32) PhysicalAddress;
+
+    //
+    // Returns the pointer
+    //
+    *TableEntryPointStructure = EntryPointStructure;
+
+  }
+
+  return EFI_SUCCESS;
+}
+
+/**
+  Installs the Smbios Table to the System Table. This function gets called
+  when the EFI_EVENT_SIGNAL_READY_TO_BOOT gets signaled
+
+  @param ImageHandle     Module's image handle
+  @param SystemTable     Pointer of EFI_SYSTEM_TABLE
+
+  @retval EFI_SUCCESS    Smbios protocol installed
+
+**/
+EFI_STATUS
+EFIAPI
+XenSmbiosTablePublish (
+  IN EFI_HANDLE           ImageHandle,
+  IN EFI_SYSTEM_TABLE     *SystemTable
+  )
+{
+  UINT8                     *Eps;
+  EFI_STATUS                Status;
+  EFI_HOB_GUID_TYPE         *GuidHob;
+
+  DEBUG ((EFI_D_INFO, "XenSmbiosTablePublish line %d \n", __LINE__));
+  //
+  // See if a XenInfo HOB is available
+  //
+  GuidHob = GetFirstGuidHob (&gEfiXenInfoGuid);
+  if (GuidHob != NULL) {
+    //
+    // We are running inside Xen HVM, and then publish Xen hvmloader SMBIOS
+    //
+    Status = XenSmbiosCreateTable ((VOID **) &Eps);
+    if (!EFI_ERROR (Status)) {
+      gBS->InstallConfigurationTable (&gEfiSmbiosTableGuid, Eps);
+    }
+  }
+
+  return EFI_SUCCESS;
+}
Index: OvmfPkg/XenSmbiosDxe/XenSmbiosDxe.h
===================================================================
--- OvmfPkg/XenSmbiosDxe/XenSmbiosDxe.h	(revision 0)
+++ OvmfPkg/XenSmbiosDxe/XenSmbiosDxe.h	(revision 0)
@@ -0,0 +1,40 @@
+/** @file
+  This code passthroughs Xen hvmloader SMBIOS inside OVMF.
+  
+Copyright (c) 2009 - 2010, Intel Corporation. All rights reserved.<BR>
+This program and the accompanying materials                          
+are licensed and made available under the terms and conditions of the BSD License         
+which accompanies this distribution.  The full text of the license may be found at        
+http://opensource.org/licenses/bsd-license.php                                            
+                                                                                          
+THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,                     
+WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.             
+
+**/
+
+#ifndef _XEN_SMBIOS_DXE_H_
+#define _XEN_SMBIOS_DXE_H_
+
+
+#include <PiDxe.h>
+
+#include <Protocol/Smbios.h>
+#include <IndustryStandard/SmBios.h>
+#include <Guid/EventGroup.h>
+#include <Guid/SmBios.h>
+#include <Library/DebugLib.h>
+//#include <Library/UefiDriverEntryPoint.h>
+#include <Library/UefiLib.h>
+#include <Library/BaseLib.h>
+#include <Library/BaseMemoryLib.h>
+#include <Library/MemoryAllocationLib.h>
+#include <Library/UefiBootServicesTableLib.h>
+//#include <Library/PcdLib.h>
+#include <Library/HobLib.h>
+
+#define XEN_SMBIOS_PHYSICAL_ADDRESS       0x000EB000
+#define XEN_SMBIOS_PHYSICAL_END           0x000F0000
+
+extern EFI_GUID gEfiXenInfoGuid;
+
+#endif
