Index: Universal/SmbiosDxe/SmbiosDxe.h
===================================================================
--- Universal/SmbiosDxe/SmbiosDxe.h	(revision 11711)
+++ Universal/SmbiosDxe/SmbiosDxe.h	(working copy)
@@ -30,6 +30,7 @@
 #include <Library/MemoryAllocationLib.h>
 #include <Library/UefiBootServicesTableLib.h>
 #include <Library/PcdLib.h>
+#include <Library/HobLib.h>
 
 #define SMBIOS_INSTANCE_SIGNATURE SIGNATURE_32 ('S', 'B', 'i', 's')
 typedef struct {
@@ -108,4 +109,9 @@
   UINT8                    Tailing[2];
 } EFI_SMBIOS_TABLE_END_STRUCTURE;
 
+#define XEN_SMBIOS_PHYSICAL_ADDRESS       0x000EB000
+#define XEN_SMBIOS_PHYSICAL_END           0x000F0000
+
+extern EFI_GUID gEfiXenInfoGuid;
+
 #endif
Index: Universal/SmbiosDxe/SmbiosDxe.inf
===================================================================
--- Universal/SmbiosDxe/SmbiosDxe.inf	(revision 11711)
+++ Universal/SmbiosDxe/SmbiosDxe.inf	(working copy)
@@ -36,6 +36,7 @@
 [Packages]
   MdePkg/MdePkg.dec
   MdeModulePkg/MdeModulePkg.dec
+  OvmfPkg/OvmfPkg.dec
 
 [LibraryClasses]
   UefiBootServicesTableLib
@@ -46,6 +47,7 @@
   UefiDriverEntryPoint
   DebugLib
   PcdLib
+  HobLib
 
 [Protocols]
   gEfiSmbiosProtocolGuid                       # PROTOCOL ALWAYS_PRODUCED
@@ -53,6 +55,7 @@
 [Guids]
   gEfiEventReadyToBootGuid                    # PROTOCOL ALWAYS_CONSUMED
   gEfiSmbiosTableGuid                         # PROTOCOL ALWAYS_CONSUMED
+  gEfiXenInfoGuid
 
 [FixedPcd]
   gEfiMdeModulePkgTokenSpaceGuid.PcdSmbiosVersion
Index: Universal/SmbiosDxe/SmbiosDxe.c
===================================================================
--- Universal/SmbiosDxe/SmbiosDxe.c	(revision 11711)
+++ Universal/SmbiosDxe/SmbiosDxe.c	(working copy)
@@ -102,7 +102,33 @@
   0  
 };
 
+/**
+  Figures out if Xen hvmloader provides SMBIOS for HVM.
 
+  @return UINT32     Address of Xen hvmloader SMBIOS.
+
+**/
+UINT32
+XenSmbiosDetect (
+  VOID
+  )
+{
+
+  UINT32 XenSmbiosLeaf;
+  SMBIOS_TABLE_ENTRY_POINT *EntryPointStructurePhyAddr = NULL;
+
+  for (XenSmbiosLeaf = XEN_SMBIOS_PHYSICAL_ADDRESS; XenSmbiosLeaf < XEN_SMBIOS_PHYSICAL_END; XenSmbiosLeaf += 0x1) {
+
+    EntryPointStructurePhyAddr = (SMBIOS_TABLE_ENTRY_POINT *) (UINTN) XenSmbiosLeaf;
+
+    if (!AsciiStrnCmp ((CHAR8 *) EntryPointStructurePhyAddr->AnchorString, "_SM_", 4) && !AsciiStrnCmp ((CHAR8 *) EntryPointStructurePhyAddr->IntermediateAnchorString, "_DMI_", 5)) {
+      return XenSmbiosLeaf;
+    }
+  }
+
+  return 0;
+}
+
 /**
 
   Get the full size of smbios structure including optional strings that follow the formatted structure.
@@ -794,11 +820,88 @@
   EFI_PHYSICAL_ADDRESS            PhysicalAddress;
   EFI_SMBIOS_TABLE_HEADER         *SmbiosRecord;
   EFI_SMBIOS_TABLE_END_STRUCTURE  EndStructure;
+
+  UINT32                          XenSmbiosLeaf;
+  EFI_HOB_GUID_TYPE               *GuidHob;
   
   Status            = EFI_SUCCESS;
   BufferPointer     = NULL;
+  XenSmbiosLeaf     = 0;
 
   //
+  // See if a XenInfo HOB is available
+  //
+  GuidHob = GetFirstGuidHob (&gEfiXenInfoGuid);
+  if (GuidHob != NULL) {
+    //
+    //We are running inside Xen HVM, try to find out whether Xen hvmloader provides SMBIOS
+    //
+    XenSmbiosLeaf = XenSmbiosDetect();
+  }
+
+  //
+  //If we are running inside Xen HVM and Xen hvmloader SMBIOS exists, just copy it to OVMF SMBIOS
+  //
+  if ((GuidHob != NULL) && XenSmbiosLeaf) {
+    //
+    // Initialize the EntryPointStructure with initial values.
+    //
+    if (EntryPointStructure == NULL) {
+      //
+      // Allocate memory to SMBIOS Entry Point Structures (below 4GB)
+      //
+      PhysicalAddress = 0xffffffff;
+      Status = gBS->AllocatePages (
+                     AllocateMaxAddress,
+                     EfiReservedMemoryType,
+                     EFI_SIZE_TO_PAGES (sizeof (SMBIOS_TABLE_ENTRY_POINT)),
+                     &PhysicalAddress
+                    );
+      if (EFI_ERROR (Status)) {
+        return EFI_OUT_OF_RESOURCES;
+      }
+
+      EntryPointStructure = (SMBIOS_TABLE_ENTRY_POINT *) (UINTN) PhysicalAddress;
+    
+      CopyMem (
+        EntryPointStructure,
+        (VOID *) (UINTN) XenSmbiosLeaf,
+        sizeof (SMBIOS_TABLE_ENTRY_POINT)
+       );
+    }
+
+    //
+    // Allocate memory to Structure Table (below 4GB)
+    //
+    PhysicalAddress = 0xffffffff;
+    Status = gBS->AllocatePages (
+                    AllocateMaxAddress,
+                    EfiReservedMemoryType,
+                    EFI_SIZE_TO_PAGES (EntryPointStructure->TableLength),
+                    &PhysicalAddress
+                    );
+    if (EFI_ERROR (Status)) {
+      FreePages ((VOID*) EntryPointStructure, EFI_SIZE_TO_PAGES (sizeof (SMBIOS_TABLE_ENTRY_POINT)));
+      EntryPointStructure = NULL;
+      return EFI_OUT_OF_RESOURCES;
+    }
+
+    CopyMem (
+      (VOID *) (UINTN) PhysicalAddress,
+      (VOID *) (UINTN) EntryPointStructure->TableAddress,
+      EntryPointStructure->TableLength
+     );
+
+    EntryPointStructure->TableAddress = (UINT32) PhysicalAddress;
+
+    //
+    // Returns the pointer
+    //
+    *TableEntryPointStructure = EntryPointStructure;
+
+  }
+  else {
+  //
   // Initialize the EntryPointStructure with initial values.
   //
   if (EntryPointStructure == NULL) {
@@ -946,6 +1049,7 @@
   // Returns the pointer
   //
   *TableEntryPointStructure = EntryPointStructure;
+}
 
   return EFI_SUCCESS;
 }
